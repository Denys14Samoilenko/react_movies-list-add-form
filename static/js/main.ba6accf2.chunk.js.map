{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","count","setCount","currentMovie","setCurrentMovie","setMovieFieldState","prev","isButtonDisabled","onSubmit","preventDefault","prevCount","disabled","App","moviesFromServer","setMovies","newMovie","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba6accf2.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => { },\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n\n  const [currentMovie, setCurrentMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const resetFormFields = () => {\n    setCount(prevCount => prevCount + 1);\n    setCurrentMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    resetFormFields();\n\n    onAdd({\n      title: currentMovie.title,\n      description: currentMovie.description,\n      imgUrl: currentMovie.imgUrl,\n      imdbUrl: currentMovie.imdbUrl,\n      imdbId: currentMovie.imdbId,\n    });\n  };\n\n  const setMovieFieldState = (name: string, value: string) => {\n    setCurrentMovie((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const isButtonDisabled = !currentMovie.title\n    || !currentMovie.imgUrl\n    || !currentMovie.imdbUrl\n    || !currentMovie.imdbId;\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={currentMovie.title}\n        onChange={(event) => setMovieFieldState('title', event)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={currentMovie.description}\n        onChange={(event) => setMovieFieldState('description', event)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={currentMovie.imgUrl}\n        onChange={(event) => setMovieFieldState('imgUrl', event)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={currentMovie.imdbUrl}\n        onChange={(event) => setMovieFieldState('imdbUrl', event)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={currentMovie.imdbId}\n        onChange={(event) => setMovieFieldState('imdbId', event)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isButtonDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addNewMovie = (newMovie: Movie) => {\n    setMovies((prevMovies) => [...prevMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addNewMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}